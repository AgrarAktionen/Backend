apiVersion: v1
kind: Secret
metadata:
  name: mysql-admin
  namespace: demo
type: kubernetes.io/basic-auth
stringData:
  username: admin
  password: password
  database: db
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-data
  namespace: demo
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: managed-nfs-storage
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: demo
data:
  nginx.conf: |
    user nginx;
    worker_processes  1;
    events {
      worker_connections  10240;
    }
    http {
      server {
          listen 80;
          server_name _;
          error_log /dev/stdout debug;
          access_log /dev/stdout;
          root /usr/share/nginx/html;
          
          location / {
              root /usr/share/nginx/html;
              try_files $uri $uri/ /;
              index index.html;
          }
          location /api/ {
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Host $scheme://$host:$server_port;
              proxy_set_header X-Forwarded-Request: $request;
              proxy_set_header X-Forwarded-Server $host;
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_pass http://appsrv:8080;
          }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jakartaee
  template:
    metadata:
      labels:
        app: jakartaee
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-data
      containers:
        - name: mysql
          image: mysql:8
          resources:
            requests:
              memory: "500Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "400m"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: username
            - name: MYSQL_DB
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: database
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: demo
spec:
  selector:
    matchLabels:
      app: jakartaee
  replicas: 1
  template:
    metadata:
      labels:
        app: jakartaee
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: appsrv
  namespace: demo
spec:
  selector:
    matchLabels:
      app: jakartaee
  replicas: 1
  template:
    metadata:
      labels:
        app: jakartaee
    spec:
      containers:
      - name: appsrv
        image: registry.l.aberger.at/caberger/appsrv:latest
        ports:
        - containerPort: 8080
      imagePullSecrets:
        - name: leocloudcredentials        
